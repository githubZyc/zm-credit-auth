buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath('com.palantir.gradle.docker:gradle-docker:0.19.2')
    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
//apply plugin: 'com.palantir.docker'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.guoanjia.common'
version = '0.0.01'

//docker {
//    dockerfile file('src/Dockerfile')
////    dependsOn build
//    name "${project.group}/credit"
//    files bootJar.archivePath
//    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    baseName = "common-credit"
    groupId = "com.guoanjia.common"
    jarVersion = "0.0.01"

    publishUserName = "admin"
    publishUserPassword = "AsherLi_2018"

    snapshotRepositoryUrl = "http://www.wizhishu.com:8081/repository/wizhishu-snapshot/"
    releaseRepositoryUrl = "http://www.wizhishu.com:8081/repository/wizhishu-release/"
}

jar {
    enabled = true
}

//编码
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// 打包
bootJar {
    enabled = true
    baseName = "${baseName}"
    version = "${jarVersion}"
    classifier = 'public'
}

springBoot {
    buildInfo {
        //noinspection GroovyAssignabilityCheck
        properties {
            artifact = "${baseName}"
            version = "${jarVersion}"
            group = "${groupId}"
            name = "credit"
            description = 'Credit center'
        }
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        docEncoding 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/9/docs/api"
        title "国安家信用服务模块API"
    }
}



repositories {
    jcenter()
    mavenCentral()
}

// 排除
configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    //所有Jar排除 commons-logging
    all*.exclude module: 'commons-logging'
}

dependencies {
    runtime group: 'mysql', name: 'mysql-connector-java'
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-validation')
    // 内嵌容器性能对比 https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/
    // compile('org.springframework.boot:spring-boot-starter-jetty')
    compile('org.springframework.boot:spring-boot-starter-undertow')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.apache.commons:commons-lang3:3.6')
    compile('com.google.code.gson:gson:2.8.2')
    compile('com.google.guava:guava:24.0-jre')
//    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile "io.springfox:springfox-swagger2:2.9.0"
    compile "io.springfox:springfox-swagger-ui:2.9.0"
//    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
//    compile 'io.github.yedaxia:japidocs:1.2'
    compile ( 'commons-io:commons-io:2.6')

    compile('com.alipay.sdk:alipay-sdk-java:3.0.0')

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

// spring-boot-configuration-processor
compileJava.dependsOn(processResources)

// 用于去除已下警告信息
// 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
// 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
gradle.projectsEvaluated {
    //noinspection GroovyAssignabilityCheck
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.artifactId = "${baseName}"
                pom.groupId = "${groupId}"
                pom.version = "${jarVersion}"
                repository(url: "${releaseRepositoryUrl}") {
                    authentication(userName: "${publishUserName}", password: "${publishUserPassword}")
                }
                snapshotRepository(url: "${snapshotRepositoryUrl}") {
                    authentication(userName: "${publishUserName}", password: "${publishUserPassword}")
                }
            }
        }
    }

    //解决 JavaDoc 中文注释生成失败的问题
    //noinspection GroovyAssignabilityCheck
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = "${baseName}"
    version = "${jarVersion}"
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    baseName = "${baseName}"
    version = "${jarVersion}"
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}



